{"version":3,"sources":["../../../api/v1/controllers/usercontroller.js"],"names":["signUp","req","res","user","body","password","hashes","hashPassword","UserHelper","newUser","status","send","success","message","data","logIn","email","result","userPassword","comparePassword","id","role","generateToken","token","getAllUsers","getUserById","params","getCurrentUser","deleteUser","findUser"],"mappings":"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","file":"usercontroller.js","sourcesContent":["import hashes from '../middleware/hashes';\nimport UserHelper from '../helpers/usershelper';\n\nexport default {\n  signUp: async (req, res) => {\n    const user = req.body;\n    user.password = hashes.hashPassword(user.password);\n\n    try {\n      const newUser = await UserHelper.signUp(user);\n      return res.status(201).send({\n        success: true,\n        message: 'User account created successfully',\n        data: newUser,\n      });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  logIn: async (req, res) => {\n    const { email, password } = req.body;\n\n    try {\n      const result = await UserHelper.logIn(email);\n      if (!result) {\n        return res.status(401).send({ success: false, message: 'User account not found.' });\n      }\n      const { password: userPassword } = result;\n      if (!hashes.comparePassword(password, userPassword)) {\n        return res.status(401).send({\n          success: false,\n          message: 'Invalid email/password combination.',\n        });\n      }\n      const { id, role } = result;\n      const token = await hashes.generateToken({ id, role });\n      return res.status(200).send({ success: true, message: 'You are now logged in.', token });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getAllUsers: async (req, res) => {\n    try {\n      const result = await UserHelper.getAllUsers();\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getUserById: async (req, res) => {\n    try {\n      const { id } = req.params;\n      const result = await UserHelper.getUserById(id);\n      if (!result) {\n        return res.status(400).send({ success: false, message: 'User not found' });\n      }\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getCurrentUser: async (req, res) => {\n    try {\n      const { id } = req.user;\n      const result = await UserHelper.getUserById(id);\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  deleteUser: async (req, res) => {\n    try {\n      const { id } = req.params;\n      const findUser = await UserHelper.getUserById(id);\n      if (!findUser) {\n        return res.status(400).send({ success: false, message: 'User not found.' });\n      }\n      await UserHelper.deleteUser(id);\n      return res.status(200).send({ success: true, message: 'User deleted successfully.' });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n  // update user\n};\n"]}