{"version":3,"sources":["../../../api/v1/controllers/productcontroller.js"],"names":["createProduct","req","res","product","body","ProductHelper","result","status","send","success","message","data","getAllProducts","length","getProductById","id","params","updateProduct","name","description","price","quantity","minimumQuantity","imgUrl","minimum_quantity","imgurl","deleteProduct","findProduct","getProductSales"],"mappings":"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","file":"productcontroller.js","sourcesContent":["import ProductHelper from '../helpers/productshelper';\n\nexport default {\n  createProduct: async (req, res) => {\n    const product = req.body;\n    try {\n      const result = await ProductHelper.createProduct(product);\n      return res.status(201).send({\n        success: true,\n        message: 'Product created successfully.',\n        data: result,\n      });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getAllProducts: async (req, res) => {\n    try {\n      const result = await ProductHelper.getAllProducts();\n      if (result.length === 0) {\n        return res.status(200).send({ success: false, message: 'No products available yet' });\n      }\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getProductById: async (req, res) => {\n    try {\n      const { id } = req.params;\n      const result = await ProductHelper.getProductById(id);\n      if (!result) {\n        return res.status(400).send({ success: false, message: 'Product not found' });\n      }\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  updateProduct: async (req, res) => {\n    const { id } = req.params;\n    try {\n      const product = await ProductHelper.getProductById(id);\n      if (!product) {\n        return res.status(400).send({ success: false, message: 'Product not found.' });\n      }\n\n      const {\n        name, description, price, quantity, minimumQuantity, imgUrl,\n      } = req.body;\n      product.name = name || product.name;\n      product.description = description || product.description;\n      product.price = price || product.price;\n      product.quantity = quantity || product.quantity;\n      product.minimumQuantity = minimumQuantity || product.minimum_quantity;\n      product.imgUrl = imgUrl || product.imgurl;\n\n      const result = await ProductHelper.updateProduct(id, product);\n      return res.status(200).send({\n        success: true,\n        message: 'Product updated successfully',\n        data: result,\n      });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  deleteProduct: async (req, res) => {\n    try {\n      const { id } = req.params;\n      const findProduct = await ProductHelper.getProductById(id);\n      if (!findProduct) {\n        return res.status(400).send({ success: false, message: 'Product not found.' });\n      }\n      await ProductHelper.deleteProduct(id);\n      return res.status(200).send({ success: true, message: 'Product deleted successfully.' });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n\n  getProductSales: async (req, res) => {\n    try {\n      const { id } = req.params;\n      const findProduct = await ProductHelper.getProductById(id);\n      if (!findProduct) {\n        return res.status(400).send({ success: false, message: 'Product not found.' });\n      }\n      const result = await ProductHelper.getProductSales(id);\n      if (result.length === 0) {\n        return res.status(200).send({ success: true, message: 'No records for this product.' });\n      }\n      return res.status(200).send({ success: true, data: result });\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n  },\n};\n"]}