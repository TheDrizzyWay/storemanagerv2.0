{"version":3,"sources":["../../../api/v1/helpers/Sales.js"],"names":["Sale","sale","productId","name","price","quantitySold","total","saleTotal","sellerId","text","values","uuid","v4","pool","query","rows","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,I;AACnB,gBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,SAAL,GAAiBD,KAAKC,SAAtB;AACA,SAAKC,IAAL,GAAYF,KAAKE,IAAjB;AACA,SAAKC,KAAL,GAAaH,KAAKG,KAAlB;AACA,SAAKC,YAAL,GAAoBJ,KAAKI,YAAzB;AACA,SAAKC,KAAL,GAAaL,KAAKM,SAAlB;AACA,SAAKC,QAAL,GAAgBP,KAAKO,QAArB;AACD;;;;;;;;;;;;AAGOC,oB;AAEAC,sB,GAAS,CAACC,eAAKC,EAAL,EAAD,EAAY,KAAKV,SAAjB,EAA4B,KAAKC,IAAjC,EAAuC,KAAKC,KAA5C,EAAmD,KAAKC,YAAxD,EACb,KAAKC,KADQ,EACD,KAAKE,QADJ,C;;uBAEQK,mBAAKC,KAAL,CAAWL,IAAX,EAAiBC,MAAjB,C;;;;AAAfK,oB,SAAAA,I;iDACDA,KAAK,CAAL,C;;;;;;;;;;;;;;;;;;;;;;;;;;AAIDN,oB,GAAO,qB;;uBACUI,mBAAKC,KAAL,CAAWL,IAAX,C;;;;AAAfM,oB,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;6GAGyBC,E;;;;;;;AAC1BP,oB,GAAO,0C;AACPC,sB,GAAS,CAACM,EAAD,C;;uBACQH,mBAAKC,KAAL,CAAWL,IAAX,EAAiBC,MAAjB,C;;;;AAAfK,oB,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;6GAGgBC,E;;;;;;;AACjBP,oB,GAAO,wC;AACPC,sB,GAAS,CAACM,EAAD,C;;uBACQH,mBAAKC,KAAL,CAAWL,IAAX,EAAiBC,MAAjB,C;;;;AAAfK,oB,SAAAA,I;kDACDA,KAAK,CAAL,C;;;;;;;;;;;;;;;;;;;;kBApCUf,I","file":"Sales.js","sourcesContent":["import uuid from 'uuid';\nimport pool from '../database/dbconfig';\n\nexport default class Sale {\n  constructor(sale) {\n    this.productId = sale.productId;\n    this.name = sale.name;\n    this.price = sale.price;\n    this.quantitySold = sale.quantitySold;\n    this.total = sale.saleTotal;\n    this.sellerId = sale.sellerId;\n  }\n\n  async createSale() {\n    const text = `INSERT INTO sales (sale_id, product_id, name, price, quantity_sold,\n      total, seller_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`;\n    const values = [uuid.v4(), this.productId, this.name, this.price, this.quantitySold,\n      this.total, this.sellerId];\n    const { rows } = await pool.query(text, values);\n    return rows[0];\n  }\n\n  static async getAllSalesAdmin() {\n    const text = 'SELECT * FROM sales';\n    const { rows } = await pool.query(text);\n    return rows;\n  }\n\n  static async getAllSalesAttendant(id) {\n    const text = 'SELECT * FROM sales WHERE seller_id = $1';\n    const values = [id];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  static async getSaleById(id) {\n    const text = 'SELECT * FROM sales WHERE sale_id = $1';\n    const values = [id];\n    const { rows } = await pool.query(text, values);\n    return rows[0];\n  }\n}\n"]}