{"version":3,"sources":["../../../api/v1/validations/salevalidation.js"],"names":["convertText","a","charAt","toUpperCase","slice","trim","createSaleValid","req","res","next","sales","body","counter","productLength","length","errors","forEach","sale","name","quantitySold","newName","newQuantitySold","validator","isEmpty","push","isNumeric","newQuantitySold2","parseInt","toFixed","status","send","success","data","checkRepeat","keyArray","keySet","size","message"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc;AAAA,SAAK,CAACC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,KAAF,CAAQ,CAAR,CAA7B,EAAyCC,IAAzC,EAAL;AAAA,CAApB;;kBAEe;AACbC,mBAAiB,yBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QAC3BC,KAD2B,GACjBH,IAAII,IADa,CAC3BD,KAD2B;;AAEnC,QAAIE,UAAU,CAAd;AACA,QAAMC,gBAAgBH,MAAMI,MAA5B;AACA,QAAMC,SAAS,EAAf;;AAEAL,UAAMM,OAAN,CAAc,UAACC,IAAD,EAAU;AAAA,UACdC,IADc,GACSD,IADT,CACdC,IADc;AAAA,UACRC,YADQ,GACSF,IADT,CACRE,YADQ;;AAEtB,UAAMC,UAAUpB,YAAYkB,IAAZ,CAAhB;AACA,UAAMG,kBAAkBF,aAAad,IAAb,EAAxB;;AAEA,UAAI,CAACe,OAAD,IAAYE,oBAAUC,OAAV,CAAkBH,OAAlB,CAAhB,EAA4C;AAC1CL,eAAOS,IAAP,CAAY,4BAAZ;AACD;AACD,UAAI,CAACL,YAAD,IAAiBG,oBAAUC,OAAV,CAAkBJ,YAAlB,CAAjB,IACDA,gBAAgB,CADf,IACoB,CAACG,oBAAUG,SAAV,CAAoBN,YAApB,CADzB,EAC4D;AAC1DJ,eAAOS,IAAP,wCAAiDJ,OAAjD;AACD;;AAED,UAAMM,mBAAmBC,SAASN,gBAAgBhB,IAAhB,EAAT,EAAiC,EAAjC,EAAqCuB,OAArC,CAA6C,CAA7C,CAAzB;AACAlB,YAAME,OAAN,EAAeM,IAAf,GAAsBE,OAAtB;AACAV,YAAME,OAAN,EAAeO,YAAf,GAA8BO,gBAA9B;AACAd,iBAAW,CAAX;AACA,UAAIA,YAAYC,aAAhB,EAA+B;AAC7B,YAAIE,OAAOD,MAAP,GAAgB,CAApB,EAAuB;AACrB,iBAAON,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMjB,MAAxB,EAArB,CAAP;AACD;AACDN;AACD;AACD,aAAO,IAAP;AACD,KAxBD;AAyBD,GAhCY;;AAkCbwB,eAAa,qBAAC1B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QACvBC,KADuB,GACbH,IAAII,IADS,CACvBD,KADuB;;AAE/B,QAAIE,UAAU,CAAd;AACA,QAAMC,gBAAgBH,MAAMI,MAA5B;AACA,QAAMoB,WAAW,EAAjB;;AAEAxB,UAAMM,OAAN,CAAc,UAACC,IAAD,EAAU;AAAA,UACdC,IADc,GACLD,IADK,CACdC,IADc;;AAEtBgB,eAASV,IAAT,CAAcN,IAAd;AACAN,iBAAW,CAAX;;AAEA,UAAIA,YAAYC,aAAhB,EAA+B;AAC7B,YAAMsB,SAAS,kBAAQD,QAAR,CAAf;AACA,YAAIA,SAASpB,MAAT,KAAoBqB,OAAOC,IAA/B,EAAqC;AACnC,iBAAO5B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BM,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD5B;AACD;AACD,aAAO,IAAP;AACD,KAhBD;AAiBD;AAzDY,C","file":"salevalidation.js","sourcesContent":["import validator from 'validator';\n\nconst convertText = a => (a.charAt(0).toUpperCase() + a.slice(1)).trim();\n\nexport default {\n  createSaleValid: (req, res, next) => {\n    const { sales } = req.body;\n    let counter = 0;\n    const productLength = sales.length;\n    const errors = [];\n\n    sales.forEach((sale) => {\n      const { name, quantitySold } = sale;\n      const newName = convertText(name);\n      const newQuantitySold = quantitySold.trim();\n\n      if (!newName || validator.isEmpty(newName)) {\n        errors.push('Please input product name.');\n      }\n      if (!quantitySold || validator.isEmpty(quantitySold)\n      || quantitySold <= 0 || !validator.isNumeric(quantitySold)) {\n        errors.push(`Please input a valid quantity for ${newName}.`);\n      }\n\n      const newQuantitySold2 = parseInt(newQuantitySold.trim(), 10).toFixed(0);\n      sales[counter].name = newName;\n      sales[counter].quantitySold = newQuantitySold2;\n      counter += 1;\n      if (counter === productLength) {\n        if (errors.length > 0) {\n          return res.status(400).send({ success: false, data: errors });\n        }\n        next();\n      }\n      return true;\n    });\n  },\n\n  checkRepeat: (req, res, next) => {\n    const { sales } = req.body;\n    let counter = 0;\n    const productLength = sales.length;\n    const keyArray = [];\n\n    sales.forEach((sale) => {\n      const { name } = sale;\n      keyArray.push(name);\n      counter += 1;\n\n      if (counter === productLength) {\n        const keySet = new Set(keyArray);\n        if (keyArray.length !== keySet.size) {\n          return res.status(400).send({\n            success: false,\n            message: 'No product should be selected more than once.',\n          });\n        }\n        next();\n      }\n      return true;\n    });\n  },\n};\n"]}