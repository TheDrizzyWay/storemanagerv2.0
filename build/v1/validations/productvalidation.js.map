{"version":3,"sources":["../../../api/v1/validations/productvalidation.js"],"names":["convertText","a","charAt","toUpperCase","slice","trim","createProductValid","req","res","next","body","name","description","price","quantity","minimumQuantity","imgUrl","errors","checkInput","checkImgUrl","newName","newDescription","newImgUrl","fields","emptyField","map","field","validator","isEmpty","status","send","success","message","test","push","isLength","min","max","isNumeric","length","data","newPrice","parseFloat","toFixed","newQuantity","parseInt","newMinimumQuantity","ProductHelper","getProductByName","result","updateProductValid"],"mappings":"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","file":"productvalidation.js","sourcesContent":["import validator from 'validator';\nimport ProductHelper from '../helpers/productshelper';\n\nconst convertText = a => (a.charAt(0).toUpperCase() + a.slice(1)).trim();\n\nexport default {\n  createProductValid: async (req, res, next) => {\n    const {\n      name, description, price, quantity, minimumQuantity, imgUrl,\n    } = req.body;\n    const errors = [];\n    const checkInput = /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/;\n    const checkImgUrl = /(http(s?):(\\/){2})([^/])([/.\\w\\s-])*\\.(?:jpg|png)/g;\n    const newName = convertText(name);\n    const newDescription = description.trim();\n    const newImgUrl = imgUrl.trim();\n\n    const fields = [newName, newDescription, price, quantity, minimumQuantity, newImgUrl];\n    let emptyField;\n    fields.map((field) => {\n      if (!field || validator.isEmpty(field)) {\n        emptyField = true;\n      }\n      return emptyField;\n    });\n    if (emptyField) return res.status(400).send({ success: false, message: 'Please fill in all fields.' });\n\n    if (checkInput.test(newName)) {\n      errors.push('Product name should contain only alphabets and numbers.');\n    }\n    if (!validator.isLength(newName, { min: 2, max: 50 })) {\n      errors.push('Product name should be between 2 and 50 characters long');\n    }\n    if (!validator.isLength(newDescription, { min: 2, max: 200 })) {\n      errors.push('Product description should be between 2 and 200 characters long');\n    }\n    if (checkInput.test(newDescription)) {\n      errors.push('Product description should contain only alphabets and numbers.');\n    }\n    if (!validator.isNumeric(price)) {\n      errors.push('Product price should contain only numbers');\n    }\n    if (!validator.isNumeric(quantity)) {\n      errors.push('Product quantity should contain only numbers');\n    }\n    if (!validator.isNumeric(minimumQuantity)) {\n      errors.push('Product minimum quantity should contain only numbers');\n    }\n    if (!checkImgUrl.test(newImgUrl)) {\n      errors.push('Please insert a valid image link.');\n    }\n\n    if (errors.length > 0) {\n      return res.status(400).send({\n        success: false,\n        data: errors,\n      });\n    }\n\n    const newPrice = parseFloat(price.trim(), 10).toFixed(2);\n    const newQuantity = parseInt(quantity.trim(), 10);\n    const newMinimumQuantity = parseInt(minimumQuantity.trim(), 10);\n\n    req.body.name = newName;\n    req.body.description = newDescription;\n    req.body.price = newPrice;\n    req.body.quantity = newQuantity;\n    req.body.minimumQuantity = newMinimumQuantity;\n    req.body.imgUrl = newImgUrl;\n\n    try {\n      const result = await ProductHelper.getProductByName(newName);\n      if (result) {\n        return res.status(400).send({ success: false, message: 'This product already exists.' });\n      }\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n    return next();\n  },\n\n  updateProductValid: async (req, res, next) => {\n    const {\n      name, description, price, quantity, minimumQuantity, imgUrl,\n    } = req.body;\n    const errors = [];\n    const checkInput = /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/;\n    const checkImgUrl = /(http(s?):(\\/){2})([^/])([/.\\w\\s-])*\\.(?:jpg|png)/g;\n\n    if (!name && !description && !price && !quantity\n    && !minimumQuantity && !imgUrl) {\n      return res.status(400).send({ success: false, message: 'Please fill in one or more fields.' });\n    }\n    if (name) {\n      const newName = convertText(name);\n      if (checkInput.test(newName)) {\n        errors.push('Product name should contain only alphabets and numbers.');\n      }\n      if (!validator.isLength(newName, { min: 2, max: 50 })) {\n        errors.push('Product name should be between 2 and 50 characters long');\n      }\n      req.body.name = newName;\n    }\n    if (description) {\n      const newDescription = description.trim();\n      if (!validator.isLength(newDescription, { min: 2, max: 200 })) {\n        errors.push('Product description should be between 2 and 200 characters long');\n      }\n      if (checkInput.test(newDescription)) {\n        errors.push('Product description should contain only alphabets and numbers.');\n      }\n      req.body.description = newDescription;\n    }\n    if (imgUrl) {\n      const newImgUrl = imgUrl.trim();\n      if (!checkImgUrl.test(newImgUrl)) {\n        errors.push('Please insert a valid image link.');\n      }\n      req.body.imgUrl = newImgUrl;\n    }\n    if (price) {\n      if (!validator.isNumeric(price)) {\n        errors.push('Product price should contain only numbers');\n      }\n      const newPrice = parseFloat(price.trim(), 10).toFixed(2);\n      req.body.price = newPrice;\n    }\n    if (quantity) {\n      if (!validator.isNumeric(quantity)) {\n        errors.push('Product quantity should contain only numbers');\n      }\n      const newQuantity = parseInt(quantity.trim(), 10);\n      req.body.quantity = newQuantity;\n    }\n    if (minimumQuantity) {\n      if (!validator.isNumeric(minimumQuantity)) {\n        errors.push('Product minimum quantity should contain only numbers');\n      }\n      const newMinimumQuantity = parseInt(minimumQuantity.trim(), 10);\n      req.body.minimumQuantity = newMinimumQuantity;\n    }\n\n    if (errors.length > 0) {\n      return res.status(400).send({\n        success: false,\n        data: errors,\n      });\n    }\n\n    try {\n      if (req.body.name) {\n        const result = await ProductHelper.getProductByName(req.body.name);\n        if (result) {\n          return res.status(400).send({ success: false, message: 'This product already exists.' });\n        }\n      }\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n    return next();\n  },\n};\n"]}