{"version":3,"sources":["../../../api/v1/validations/categoryvalidation.js"],"names":["convertText","a","charAt","toUpperCase","slice","trim","createCategoryValid","req","res","next","name","body","errors","newName","checkInput","validator","isEmpty","status","send","success","message","test","push","isLength","min","max","length","data","CategoryHelper","getCategoryByName","result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc;AAAA,SAAK,CAACC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,KAAF,CAAQ,CAAR,CAA7B,EAAyCC,IAAzC,EAAL;AAAA,CAApB;;kBAEe;AACbC;AAAA,wFAAqB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,kBADW,GACFH,IAAII,IADF,CACXD,IADW;AAEbE,oBAFa,GAEJ,EAFI;AAGbC,qBAHa,GAGHb,YAAYU,IAAZ,CAHG;AAIbI,wBAJa,GAIA,qCAJA;;AAAA,oBAMf,CAACD,OAAD,IAAYE,oBAAUC,OAAV,CAAkBH,OAAlB,CANG;AAAA;AAAA;AAAA;;AAAA,+CAOVL,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,4BAA3B,EAArB,CAPU;;AAAA;AASnB,kBAAIN,WAAWO,IAAX,CAAgBR,OAAhB,CAAJ,EAA8B;AAC5BD,uBAAOU,IAAP,CAAY,0DAAZ;AACD;AACD,kBAAI,CAACP,oBAAUQ,QAAV,CAAmBV,OAAnB,EAA4B,EAAEW,KAAK,CAAP,EAAUC,KAAK,EAAf,EAA5B,CAAL,EAAuD;AACrDb,uBAAOU,IAAP,CAAY,0DAAZ;AACD;;AAdkB,oBAefV,OAAOc,MAAP,GAAgB,CAfD;AAAA;AAAA;AAAA;;AAAA,+CAgBVlB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,yBAAS,KADiB;AAE1BQ,sBAAMf;AAFoB,eAArB,CAhBU;;AAAA;AAqBnBL,kBAAII,IAAJ,CAASD,IAAT,GAAgBG,OAAhB;;AArBmB;AAAA;AAAA,qBAwBIe,2BAAeC,iBAAf,CAAiChB,OAAjC,CAxBJ;;AAAA;AAwBXiB,oBAxBW;;AAAA,mBAyBbA,MAzBa;AAAA;AAAA;AAAA;;AAAA,+CA0BRtB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAArB,CA1BQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CA6BVZ,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,YAAMA,OAAjC,EAArB,CA7BU;;AAAA;AAAA,+CA+BZX,MA/BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADa,C","file":"categoryvalidation.js","sourcesContent":["import validator from 'validator';\nimport CategoryHelper from '../helpers/categorieshelper';\n\nconst convertText = a => (a.charAt(0).toUpperCase() + a.slice(1)).trim();\n\nexport default {\n  createCategoryValid: async (req, res, next) => {\n    const { name } = req.body;\n    const errors = [];\n    const newName = convertText(name);\n    const checkInput = /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/;\n\n    if (!newName || validator.isEmpty(newName)) {\n      return res.status(400).send({ success: false, message: 'Please fill in name field.' });\n    }\n    if (checkInput.test(newName)) {\n      errors.push('Category name should contain only alphabets and numbers.');\n    }\n    if (!validator.isLength(newName, { min: 2, max: 50 })) {\n      errors.push('Category name should be between 2 and 50 characters long');\n    }\n    if (errors.length > 0) {\n      return res.status(400).send({\n        success: false,\n        data: errors,\n      });\n    }\n    req.body.name = newName;\n\n    try {\n      const result = await CategoryHelper.getCategoryByName(newName);\n      if (result) {\n        return res.status(400).send({ success: false, message: 'This category already exists.' });\n      }\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n    return next();\n  },\n};\n"]}