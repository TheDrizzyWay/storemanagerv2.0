{"version":3,"sources":["../../../api/v1/validations/authvalidation.js"],"names":["convertText","a","charAt","toUpperCase","slice","trim","logInValid","req","res","next","body","email","password","errors","validator","isEmpty","push","length","status","send","success","message","data","signUpValid","firstName","lastName","role","newFirstName","newLastName","newEmail","newPassword","newRole","toLowerCase","fields","emptyField","map","field","isAlpha","isLength","min","max","isEmail","isAlphanumeric","isIn","UserHelper","logIn","result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc;AAAA,SAAK,CAACC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,KAAF,CAAQ,CAAR,CAA7B,EAAyCC,IAAzC,EAAL;AAAA,CAApB;;kBAEe;AACbC,cAAY,oBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,oBACFF,IAAIG,IADF;AAAA,QACtBC,KADsB,aACtBA,KADsB;AAAA,QACfC,QADe,aACfA,QADe;;AAE9B,QAAMC,SAAS,EAAf;;AAEA,QAAI,CAACF,KAAD,IAAUG,oBAAUC,OAAV,CAAkBJ,KAAlB,CAAd,EAAwC;AACtCE,aAAOG,IAAP,CAAY,mCAAZ;AACD;AACD,QAAI,CAACJ,QAAD,IAAaE,oBAAUC,OAAV,CAAkBH,QAAlB,CAAjB,EAA8C;AAC5CC,aAAOG,IAAP,CAAY,8BAAZ;AACD;AACD,QAAIH,OAAOI,MAAP,GAAgB,CAApB,EAAuB;AACrB,aAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS,KADiB;AAE1BC,iBAAS,iCAFiB;AAG1BC,cAAMT;AAHoB,OAArB,CAAP;AAKD;AACDN,QAAIG,IAAJ,CAASC,KAAT,GAAiBA,MAAMN,IAAN,EAAjB;AACAE,QAAIG,IAAJ,CAASE,QAAT,GAAoBA,SAASP,IAAT,EAApB;AACA,WAAOI,MAAP;AACD,GArBY;;AAuBbc;AAAA,wFAAa,iBAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAGPF,IAAIG,IAHG,EAETc,SAFS,cAETA,SAFS,EAEEC,QAFF,cAEEA,QAFF,EAEYd,KAFZ,cAEYA,KAFZ,EAEmBC,QAFnB,cAEmBA,QAFnB,EAE6Bc,IAF7B,cAE6BA,IAF7B;AAILb,oBAJK,GAII,EAJJ;AAKLc,0BALK,GAKU3B,YAAYwB,SAAZ,CALV;AAMLI,yBANK,GAMS5B,YAAYyB,QAAZ,CANT;AAOLI,sBAPK,GAOMlB,MAAMN,IAAN,EAPN;AAQLyB,yBARK,GAQSlB,SAASP,IAAT,EART;AASL0B,qBATK,GASKL,KAAKrB,IAAL,GAAY2B,WAAZ,EATL;AAWLC,oBAXK,GAWI,CAACN,YAAD,EAAeC,WAAf,EAA4BC,QAA5B,EAAsCC,WAAtC,EAAmDC,OAAnD,CAXJ;AAYPG,wBAZO;;AAaXD,qBAAOE,GAAP,CAAW,UAACC,KAAD,EAAW;AACpB,oBAAI,CAACA,KAAD,IAAUtB,oBAAUC,OAAV,CAAkBqB,KAAlB,CAAd,EAAwC;AACtCF,+BAAa,IAAb;AACD;AACD,uBAAOA,UAAP;AACD,eALD;;AAbW,mBAmBPA,UAnBO;AAAA;AAAA;AAAA;;AAAA,+CAmBY1B,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,4BAA3B,EAArB,CAnBZ;;AAAA;AAoBX,kBAAI,CAACP,oBAAUuB,OAAV,CAAkBV,YAAlB,CAAL,EAAsC;AACpCd,uBAAOG,IAAP,CAAY,gDAAZ;AACD;AACD,kBAAI,CAACF,oBAAUwB,QAAV,CAAmBX,YAAnB,EAAiC,EAAEY,KAAK,CAAP,EAAUC,KAAK,EAAf,EAAjC,CAAL,EAA4D;AAC1D3B,uBAAOG,IAAP,CAAY,4DAAZ;AACD;AACD,kBAAI,CAACF,oBAAUuB,OAAV,CAAkBT,WAAlB,CAAL,EAAqC;AACnCf,uBAAOG,IAAP,CAAY,+CAAZ;AACD;AACD,kBAAI,CAACF,oBAAUwB,QAAV,CAAmBV,WAAnB,EAAgC,EAAEW,KAAK,CAAP,EAAUC,KAAK,EAAf,EAAhC,CAAL,EAA2D;AACzD3B,uBAAOG,IAAP,CAAY,4DAAZ;AACD;AACD,kBAAI,CAACF,oBAAU2B,OAAV,CAAkBZ,QAAlB,CAAL,EAAkC;AAChChB,uBAAOG,IAAP,CAAY,sCAAZ;AACD;AACD,kBAAI,CAACF,oBAAUwB,QAAV,CAAmBR,WAAnB,EAAgC,EAAES,KAAK,CAAP,EAAUC,KAAK,EAAf,EAAhC,CAAL,EAA2D;AACzD3B,uBAAOG,IAAP,CAAY,2DAAZ;AACD;AACD,kBAAI,CAACF,oBAAU4B,cAAV,CAAyBZ,WAAzB,CAAL,EAA4C;AAC1CjB,uBAAOG,IAAP,CAAY,wDAAZ;AACD;AACD,kBAAI,CAACF,oBAAU6B,IAAV,CAAeZ,OAAf,EAAwB,CAAC,OAAD,EAAU,WAAV,CAAxB,CAAL,EAAsD;AACpDlB,uBAAOG,IAAP,CAAY,4BAAZ;AACD;;AA3CU,oBA4CPH,OAAOI,MAAP,GAAgB,CA5CT;AAAA;AAAA;AAAA;;AAAA,+CA6CFT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,yBAAS,KADiB;AAE1BE,sBAAMT;AAFoB,eAArB,CA7CE;;AAAA;AAkDXN,kBAAIG,IAAJ,CAASc,SAAT,GAAqBG,YAArB;AACApB,kBAAIG,IAAJ,CAASe,QAAT,GAAoBG,WAApB;AACArB,kBAAIG,IAAJ,CAASC,KAAT,GAAiBkB,QAAjB;AACAtB,kBAAIG,IAAJ,CAASE,QAAT,GAAoBkB,WAApB;AACAvB,kBAAIG,IAAJ,CAASgB,IAAT,GAAgBK,OAAhB;;AAtDW;AAAA;AAAA,qBAyDYa,sBAAWC,KAAX,CAAiBhB,QAAjB,CAzDZ;;AAAA;AAyDHiB,oBAzDG;;AAAA,mBA0DLA,MA1DK;AAAA;AAAA;AAAA;;AAAA,+CA2DAtC,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,sCAA3B,EAArB,CA3DA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CA8DFb,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,YAAMA,OAAjC,EAArB,CA9DE;;AAAA;AAAA,+CAgEJZ,MAhEI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAvBa,C","file":"authvalidation.js","sourcesContent":["import validator from 'validator';\nimport UserHelper from '../helpers/usershelper';\n\nconst convertText = a => (a.charAt(0).toUpperCase() + a.slice(1)).trim();\n\nexport default {\n  logInValid: (req, res, next) => {\n    const { email, password } = req.body;\n    const errors = [];\n\n    if (!email || validator.isEmpty(email)) {\n      errors.push('Please insert your email address.');\n    }\n    if (!password || validator.isEmpty(password)) {\n      errors.push('Please insert your password.');\n    }\n    if (errors.length > 0) {\n      return res.status(400).send({\n        success: false,\n        message: 'One or more fields are missing.',\n        data: errors,\n      });\n    }\n    req.body.email = email.trim();\n    req.body.password = password.trim();\n    return next();\n  },\n\n  signUpValid: async (req, res, next) => {\n    const {\n      firstName, lastName, email, password, role,\n    } = req.body;\n    const errors = [];\n    const newFirstName = convertText(firstName);\n    const newLastName = convertText(lastName);\n    const newEmail = email.trim();\n    const newPassword = password.trim();\n    const newRole = role.trim().toLowerCase();\n\n    const fields = [newFirstName, newLastName, newEmail, newPassword, newRole];\n    let emptyField;\n    fields.map((field) => {\n      if (!field || validator.isEmpty(field)) {\n        emptyField = true;\n      }\n      return emptyField;\n    });\n    if (emptyField) return res.status(400).send({ success: false, message: 'Please fill in all fields.' });\n    if (!validator.isAlpha(newFirstName)) {\n      errors.push('Your first name should contain only alphabets.');\n    }\n    if (!validator.isLength(newFirstName, { min: 2, max: 50 })) {\n      errors.push('Your first name should be between 2 and 50 characters long');\n    }\n    if (!validator.isAlpha(newLastName)) {\n      errors.push('Your last name should contain only alphabets.');\n    }\n    if (!validator.isLength(newLastName, { min: 2, max: 50 })) {\n      errors.push('Your last name should be between 2 and 50 characters long.');\n    }\n    if (!validator.isEmail(newEmail)) {\n      errors.push('Please insert a valid email address.');\n    }\n    if (!validator.isLength(newPassword, { min: 6, max: 25 })) {\n      errors.push('Your password should be between 6 and 25 characters long.');\n    }\n    if (!validator.isAlphanumeric(newPassword)) {\n      errors.push('Your password should contain only letters and numbers.');\n    }\n    if (!validator.isIn(newRole, ['admin', 'attendant'])) {\n      errors.push('Please insert a valid role');\n    }\n    if (errors.length > 0) {\n      return res.status(400).send({\n        success: false,\n        data: errors,\n      });\n    }\n    req.body.firstName = newFirstName;\n    req.body.lastName = newLastName;\n    req.body.email = newEmail;\n    req.body.password = newPassword;\n    req.body.role = newRole;\n\n    try {\n      const result = await UserHelper.logIn(newEmail);\n      if (result) {\n        return res.status(400).send({ success: false, message: 'This email address is already taken.' });\n      }\n    } catch (error) {\n      return res.status(500).send({ success: false, message: error.message });\n    }\n    return next();\n  },\n};\n"]}