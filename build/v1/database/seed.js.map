{"version":3,"sources":["../../../api/v1/database/seed.js"],"names":["console","log","id","password","hashed","hashes","hashPassword","result","params","pool","query","saleId","productId","sellerId"],"mappings":"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","file":"seed.js","sourcesContent":["import hashes from '../middleware/hashes';\nimport pool from './dbconfig';\n\nconsole.log('seeding database');\n\n(async () => {\n  const id = '8e75ed1c-c48a-4de2-9f8c-df597aeace8f';\n  const password = 'micheal';\n  const hashed = hashes.hashPassword(password);\n  let result;\n  const params = [id, 'Micheal', 'Myers', 'mikemyers@email.com', hashed, 'admin'];\n  try {\n    result = await pool.query(`INSERT INTO users (id, first_name, last_name, email, password, role)\n      VALUES ($1, $2, $3, $4, $5, $6)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const id = '3bcbff41-7285-42f4-a934-e346382f3fbc';\n  const password = 'jasonv';\n  const hashed = hashes.hashPassword(password);\n  let result;\n  const params = [id, 'Jason', 'Voorhees', 'jasonv@email.com', hashed, 'attendant'];\n  try {\n    result = await pool.query(`INSERT INTO users (id, first_name, last_name, email, password, role)\n      VALUES ($1, $2, $3, $4, $5, $6)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const id = '59968089-65d6-438a-b5d3-03ae275fa2de';\n  const params = [id, 'Predator series'];\n  let result;\n  try {\n    result = await pool.query(`INSERT INTO categories (id, name)\n      VALUES ($1, $2)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const id = '620417b7-ab15-4679-9e5f-94e484ac9887';\n  const params = [id, 'X series'];\n  let result;\n  try {\n    result = await pool.query(`INSERT INTO categories (id, name)\n      VALUES ($1, $2)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const id = '5a1f3030-cb52-462a-a81c-ab53f115ed21';\n  const params = [id, 'adidas predator boot', 'predator description', '15000', '10',\n    '2', 'http://sampleimage.com/image1.png'];\n  let result;\n  try {\n    result = await pool.query(`INSERT INTO products (id, name, description, price, quantity, minimum_quantity, imgurl)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const id = '6522cc1b-c322-462a-97c1-0abd063135c6';\n  const params = [id, 'Adidas x boot', 'x description', '10000', '10',\n    '3', 'http://sampleimage.com/image1.jpg'];\n  let result;\n  try {\n    result = await pool.query(`INSERT INTO products (id, name, description, price, quantity, minimum_quantity, imgurl)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n\n(async () => {\n  const saleId = 'd88aea19-0e77-4134-a192-cb1048d13f8e';\n  const productId = '6522cc1b-c322-462a-97c1-0abd063135c6';\n  const sellerId = '3bcbff41-7285-42f4-a934-e346382f3fbc';\n  const params = [saleId, productId, 'Adidas x boot', '10000', '1',\n    '10000', sellerId];\n  let result;\n  try {\n    result = await pool.query(`INSERT INTO sales (sale_id, product_id, name, price, quantity_sold, total, seller_id)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)`, params);\n    return result;\n  } catch (error) {\n    return error;\n  }\n})();\n"]}