{"version":3,"sources":["../../../api/v1/models/index.js"],"names":["basename","path","module","filename","env","process","NODE_ENV","config","dbConfig","db","dotenv","sequelize","use_env_variable","Sequelize","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","modelName","associate"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,eAAKD,QAAL,CAAcE,OAAOC,QAArB,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,SAASC,iBAASJ,GAAT,CAAf;AACA,IAAMK,KAAK,EAAX;;AAEAC,iBAAOH,MAAP;;AAEA,IAAII,kBAAJ;AACA,IAAIJ,OAAOK,gBAAX,EAA6B;AAC3BD,cAAY,IAAIE,mBAAJ,CAAcR,QAAQD,GAAR,CAAYG,OAAOK,gBAAnB,CAAd,CAAZ;AACD,CAFD,MAEO;AACLD,cAAY,IAAIE,mBAAJ,CAAcN,OAAOO,QAArB,EAA+BP,OAAOQ,QAAtC,EAAgDR,OAAOS,QAAvD,EAAiET,MAAjE,CAAZ;AACD;;AAEDU,aACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU;AAAA,SAASC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASrB,QAAvC,IAAqDqB,KAAKE,KAAL,CAAW,CAAC,CAAZ,CAAD,KAAqB,KAAjF;AAAA,CAFV,EAGGC,OAHH,CAGW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQd,UAAUe,MAAV,CAAiBzB,eAAK0B,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAZ,KAAGgB,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CANH;;AAQA,oBAAYhB,EAAZ,EAAgBe,OAAhB,CAAwB,UAACK,SAAD,EAAe;AACrC,MAAIpB,GAAGoB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BrB,OAAGoB,SAAH,EAAcC,SAAd,CAAwBrB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGE,SAAH,GAAeA,SAAf;AACAF,GAAGI,SAAH,GAAeA,mBAAf;;kBAEeJ,E","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport dotenv from 'dotenv';\nimport dbConfig from '../database/config';\n\nconst basename = path.basename(module.filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = dbConfig[env];\nconst db = {};\n\ndotenv.config();\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable]);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3)) === '.js')\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"]}