{"version":3,"sources":["../../../api/v1/middleware/verifyproducts.js"],"names":["verify","req","res","next","sales","body","sellerId","user","id","counter","total","newQuantity","productLength","length","forEach","sale","name","quantitySold","Product","getProductByName","result","status","send","success","message","price","quantity","saleTotal","productId"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;kBAEe;AACbA,UAAQ,gBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QAClBC,KADkB,GACRH,IAAII,IADI,CAClBD,KADkB;;AAE1B,QAAME,WAAWL,IAAIM,IAAJ,CAASC,EAA1B;AACA,QAAIC,UAAU,CAAd;AACA,QAAIC,QAAQ,CAAZ;AACA,QAAIC,cAAc,CAAlB;AACA,QAAMC,gBAAgBR,MAAMS,MAA5B;AACAT,UAAMU,OAAN;AAAA,0FAAc,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,oBADI,GACmBD,IADnB,CACJC,IADI,EACEC,YADF,GACmBF,IADnB,CACEE,YADF;AAAA;AAAA;AAAA,uBAIWC,mBAAQC,gBAAR,CAAyBH,IAAzB,CAJX;;AAAA;AAIJI,sBAJI;;AAAA,oBAKLA,MALK;AAAA;AAAA;AAAA;;AAAA,iDAMDlB,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAYR,IAAZ,qBAAlB,EAArB,CANC;;AAAA;AAQFR,kBARE,GAQsBY,MARtB,CAQFZ,EARE,EAQEiB,KARF,GAQsBL,MARtB,CAQEK,KARF,EAQSC,QART,GAQsBN,MARtB,CAQSM,QART;;AAAA,sBASNA,WAAWT,YATL;AAAA;AAAA;AAAA;;AAAA,iDAUDf,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS,KADiB;AAE1BC,gDAA4BR,IAA5B;AAF0B,iBAArB,CAVC;;AAAA;AAeVN,wBAAQe,QAAQR,YAAhB;AACAN,8BAAce,WAAWT,YAAzB;AACAb,sBAAMK,OAAN,EAAegB,KAAf,GAAuBA,KAAvB;AACArB,sBAAMK,OAAN,EAAekB,SAAf,GAA2BjB,KAA3B;AACAN,sBAAMK,OAAN,EAAemB,SAAf,GAA2BpB,EAA3B;AACAJ,sBAAMK,OAAN,EAAeH,QAAf,GAA0BA,QAA1B;AACAF,sBAAMK,OAAN,EAAeE,WAAf,GAA6BA,WAA7B;AACAF,2BAAW,CAAX;AAtBU;AAAA;;AAAA;AAAA;AAAA;AAAA,iDAwBHP,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,YAAMA,OAAjC,EAArB,CAxBG;;AAAA;AA0BZ,oBAAIf,YAAYG,aAAhB,EAA+BT;AA1BnB,iDA2BL,IA3BK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAd;;AAAA;AAAA;AAAA;AAAA;AA6BD;AArCY,C","file":"verifyproducts.js","sourcesContent":["import Product from '../models/Products';\n\nexport default {\n  verify: (req, res, next) => {\n    const { sales } = req.body;\n    const sellerId = req.user.id;\n    let counter = 0;\n    let total = 0;\n    let newQuantity = 0;\n    const productLength = sales.length;\n    sales.forEach(async (sale) => {\n      const { name, quantitySold } = sale;\n\n      try {\n        const result = await Product.getProductByName(name);\n        if (!result) {\n          return res.status(400).send({ success: false, message: `${name} does not exist.` });\n        }\n        const { id, price, quantity } = result;\n        if (quantity < quantitySold) {\n          return res.status(400).send({\n            success: false,\n            message: `The quantity of ${name} requested is more than we have in stock.`,\n          });\n        }\n        total = price * quantitySold;\n        newQuantity = quantity - quantitySold;\n        sales[counter].price = price;\n        sales[counter].saleTotal = total;\n        sales[counter].productId = id;\n        sales[counter].sellerId = sellerId;\n        sales[counter].newQuantity = newQuantity;\n        counter += 1;\n      } catch (error) {\n        return res.status(500).send({ success: false, message: error.message });\n      }\n      if (counter === productLength) next();\n      return true;\n    });\n  },\n};\n"]}